generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Provider {
  id String @id

  identifier String  @unique
  name       String
  enabled    Boolean

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  User      User[]

  @@map("providers")
}

model User {
  id String @id

  provider   Provider? @relation(fields: [providerId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  providerId String?

  username                  String
  email                     String  @unique
  isEmailVerifiedByProvider Boolean @default(false)
  avatar                    String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  apiTokens ApiToken[]
  projects  UsersOnProjects[]

  @@map("users")
}

model ApiToken {
  id String @id

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  enabled   Boolean  @default(true)
  expiresAt DateTime

  ipAddress String?
  location  String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("apiTokens")
}

model Project {
  id String @id

  name String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  users UsersOnProjects[]

  @@map("projects")
}

enum UserOnProjectStatus {
  REQUESTED
  ACCEPTED
  DENIED
}

model UsersOnProjects {
  roleId String

  status UserOnProjectStatus @default(REQUESTED)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  attachedAt  DateTime?
  updatedAt   DateTime  @updatedAt
  requestedAt DateTime  @default(now())

  @@id([userId, projectId])
  @@map("usersOnProjects")
}

model Storage {
  id String @id

  @@map("storages")
}
